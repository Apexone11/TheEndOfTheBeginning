package gameproject;

import main.model.player;
import java.io.*;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Simple save/load system for player progress.
 * Saves player data to a plain text file in the user's home directory.
 * 
 * @version 3.0
 */
public class SaveManager {
    
    private static final String SAVE_DIR = System.getProperty("user.home") + "/.theendthebeginning";
    private static final String SAVE_FILE = SAVE_DIR + "/savegame.txt";
    
    /**
     * Saves the current game state to a file.
     * 
     * @param player The player object to save
     * @param dungeonLevel Current dungeon level
     * @return true if save was successful, false otherwise
     */
    public static boolean saveGame(player player, int dungeonLevel) {
        try {
            // Create save directory if it doesn't exist
            Files.createDirectories(Paths.get(SAVE_DIR));
            
            // Create save data
            StringBuilder saveData = new StringBuilder();
            saveData.append("# The End The Beginning - Save Game\n");
            saveData.append("# Saved: ").append(LocalDateTime.now().format(
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\n");
            saveData.append("# DO NOT EDIT THIS FILE MANUALLY\n\n");
            
            saveData.append("NAME=").append(player.getName()).append("\n");
            saveData.append("CLASS=").append(player.getPlayerClass().name()).append("\n");
            saveData.append("LEVEL=").append(player.getLevel()).append("\n");
            saveData.append("EXPERIENCE=").append(player.getExperience()).append("\n");
            saveData.append("HEALTH=").append(player.getHealth()).append("\n");
            saveData.append("MAX_HEALTH=").append(player.getMaxHealth()).append("\n");
            saveData.append("ATTACK=").append(player.getAttack()).append("\n");
            saveData.append("DEFENSE=").append(player.getDefense()).append("\n");
            saveData.append("MAGIC=").append(player.getMagic()).append("\n");
            saveData.append("DUNGEON_LEVEL=").append(dungeonLevel).append("\n");
            saveData.append("ROOMS_EXPLORED=").append(player.getRoomsExplored()).append("\n");
            saveData.append("MONSTERS_DEFEATED=").append(player.getMonstersDefeated()).append("\n");
            
            // Write to file
            Files.write(Paths.get(SAVE_FILE), saveData.toString().getBytes());
            return true;
            
        } catch (IOException e) {
            System.err.println("Error saving game: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Loads a saved game from file.
     * 
     * @return SaveData object containing loaded data, or null if load failed
     */
    public static SaveData loadGame() {
        try {
            if (!Files.exists(Paths.get(SAVE_FILE))) {
                return null; // No save file exists
            }
            
            String content = new String(Files.readAllBytes(Paths.get(SAVE_FILE)));
            SaveData data = new SaveData();
            
            // Parse the save file
            for (String line : content.split("\n")) {
                if (line.startsWith("#") || line.trim().isEmpty()) {
                    continue; // Skip comments and empty lines
                }
                
                String[] parts = line.split("=", 2);
                if (parts.length != 2) continue;
                
                String key = parts[0].trim();
                String value = parts[1].trim();
                
                switch (key) {
                    case "NAME" -> data.name = value;
                    case "CLASS" -> data.playerClass = value;
                    case "LEVEL" -> data.level = Integer.parseInt(value);
                    case "EXPERIENCE" -> data.experience = Integer.parseInt(value);
                    case "HEALTH" -> data.health = Integer.parseInt(value);
                    case "MAX_HEALTH" -> data.maxHealth = Integer.parseInt(value);
                    case "ATTACK" -> data.attack = Integer.parseInt(value);
                    case "DEFENSE" -> data.defense = Integer.parseInt(value);
                    case "MAGIC" -> data.magic = Integer.parseInt(value);
                    case "DUNGEON_LEVEL" -> data.dungeonLevel = Integer.parseInt(value);
                    case "ROOMS_EXPLORED" -> data.roomsExplored = Integer.parseInt(value);
                    case "MONSTERS_DEFEATED" -> data.monstersDefeated = Integer.parseInt(value);
                }
            }
            
            return data;
            
        } catch (Exception e) {
            System.err.println("Error loading game: " + e.getMessage());
            return null;
        }
    }
    
    /**
     * Checks if a save file exists.
     * 
     * @return true if a save file exists, false otherwise
     */
    public static boolean saveExists() {
        return Files.exists(Paths.get(SAVE_FILE));
    }
    
    /**
     * Deletes the save file.
     * 
     * @return true if deletion was successful, false otherwise
     */
    public static boolean deleteSave() {
        try {
            if (saveExists()) {
                Files.delete(Paths.get(SAVE_FILE));
                return true;
            }
            return false;
        } catch (IOException e) {
            System.err.println("Error deleting save: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Data class to hold loaded save game information.
     */
    public static class SaveData {
        public String name;
        public String playerClass;
        public int level;
        public int experience;
        public int health;
        public int maxHealth;
        public int attack;
        public int defense;
        public int magic;
        public int dungeonLevel;
        public int roomsExplored;
        public int monstersDefeated;
    }
}
