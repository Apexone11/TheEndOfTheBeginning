package gameproject;

import main.model.Player;
import java.io.*;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Enhanced save/load system for player progress with v4.0.0 features.
 * Supports comprehensive save data including combat stats, achievements, 
 * quest progress, audio settings, and multiple save slots.
 * 
 * @version 4.0.0
 */
public class SaveManager {
    
    private static final String SAVE_DIR = System.getProperty("user.home") + "/.the-end-the-beginning/saves";
    private static final String SAVE_FILE = SAVE_DIR + "/savegame.txt";
    private static final String AUTOSAVE_FILE = SAVE_DIR + "/autosave.txt";
    private static final String BACKUP_DIR = SAVE_DIR + "/backups";
    private static final int MAX_BACKUP_FILES = 5;
    
    // Save format version for compatibility
    private static final String SAVE_VERSION = "4.0.0";
    
    /**
     * Enhanced save method that handles all v4.0.0 features
     * 
     * @param player The player object to save
     * @param dungeonLevel Current dungeon level
     * @param gameData Additional game data to save
     * @return true if save was successful, false otherwise
     */
    public static boolean saveGame(Player player, int dungeonLevel, GameSaveData gameData) {
        try {
            // Create save directory and backup directory
            Path saveDir = Paths.get(SAVE_DIR);
            Path backupDir = Paths.get(BACKUP_DIR);
            Files.createDirectories(saveDir);
            Files.createDirectories(backupDir);
            
            // Create backup of existing save
            createBackup();
            
            // Create comprehensive save data
            StringBuilder saveData = new StringBuilder();
            saveData.append("# The End The Beginning - Save Game v").append(SAVE_VERSION).append("\n");
            saveData.append("# Saved: ").append(LocalDateTime.now().format(
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\n");
            saveData.append("# DO NOT EDIT THIS FILE MANUALLY\n\n");
            
            // Save format version
            saveData.append("SAVE_VERSION=").append(SAVE_VERSION).append("\n\n");
            
            // Basic player data
            saveData.append("# BASIC PLAYER DATA\n");
            saveData.append("NAME=").append(player.getName()).append("\n");
            saveData.append("CLASS=").append(player.getPlayerClass().name()).append("\n");
            saveData.append("LEVEL=").append(player.getLevel()).append("\n");
            saveData.append("EXPERIENCE=").append(player.getExperience()).append("\n");
            saveData.append("HEALTH=").append(player.getHealth()).append("\n");
            saveData.append("MAX_HEALTH=").append(player.getMaxHealth()).append("\n");
            saveData.append("MANA=").append(player.getMana()).append("\n");
            saveData.append("MAX_MANA=").append(player.getMaxMana()).append("\n");
            
            // Combat stats
            saveData.append("\n# COMBAT STATS\n");
            saveData.append("ATTACK=").append(player.getAttack()).append("\n");
            saveData.append("DEFENSE=").append(player.getDefense()).append("\n");
            saveData.append("MAGIC=").append(player.getMagic()).append("\n");
            saveData.append("AGILITY=").append(player.getAgility()).append("\n");
            saveData.append("LUCK=").append(player.getLuck()).append("\n");
            saveData.append("ACCURACY=").append(player.getAccuracy()).append("\n");
            
            // Equipment
            saveData.append("\n# EQUIPMENT\n");
            saveData.append("WEAPON=").append(player.getEquippedWeapon() != null ? player.getEquippedWeapon() : "").append("\n");
            saveData.append("ARMOR=").append(player.getEquippedArmor() != null ? player.getEquippedArmor() : "").append("\n");
            saveData.append("ACCESSORY=").append(player.getEquippedAccessory() != null ? player.getEquippedAccessory() : "").append("\n");
            
            // Game progress
            saveData.append("\n# GAME PROGRESS\n");
            saveData.append("DUNGEON_LEVEL=").append(dungeonLevel).append("\n");
            saveData.append("ROOMS_EXPLORED=").append(player.getRoomsExplored()).append("\n");
            saveData.append("MONSTERS_DEFEATED=").append(player.getMonstersDefeated()).append("\n");
            saveData.append("PLAY_TIME=").append(gameData.playTimeMinutes).append("\n");
            
            // Achievements
            if (gameData.unlockedAchievements != null && !gameData.unlockedAchievements.isEmpty()) {
                saveData.append("\n# ACHIEVEMENTS\n");
                saveData.append("UNLOCKED_ACHIEVEMENTS=").append(String.join(",", gameData.unlockedAchievements)).append("\n");
                saveData.append("ACHIEVEMENT_PROGRESS=").append(serializeMap(gameData.achievementProgress)).append("\n");
            }
            
            // Quest progress
            if (gameData.activeQuests != null && !gameData.activeQuests.isEmpty()) {
                saveData.append("\n# QUEST PROGRESS\n");
                saveData.append("ACTIVE_QUESTS=").append(String.join(",", gameData.activeQuests)).append("\n");
                saveData.append("COMPLETED_QUESTS=").append(String.join(",", gameData.completedQuests)).append("\n");
                saveData.append("QUEST_PROGRESS=").append(serializeMap(gameData.questProgress)).append("\n");
            }
            
            // Audio settings
            saveData.append("\n# AUDIO SETTINGS\n");
            saveData.append("MASTER_VOLUME=").append(gameData.masterVolume).append("\n");
            saveData.append("MUSIC_VOLUME=").append(gameData.musicVolume).append("\n");
            saveData.append("SFX_VOLUME=").append(gameData.sfxVolume).append("\n");
            saveData.append("AUDIO_ENABLED=").append(gameData.audioEnabled).append("\n");
            
            // Game settings
            saveData.append("\n# GAME SETTINGS\n");
            saveData.append("DIFFICULTY=").append(gameData.difficulty).append("\n");
            saveData.append("THEME=").append(gameData.theme).append("\n");
            saveData.append("AUTO_SAVE=").append(gameData.autoSaveEnabled).append("\n");
            
            // Statistics
            saveData.append("\n# STATISTICS\n");
            saveData.append("TOTAL_DAMAGE_DEALT=").append(gameData.totalDamageDealt).append("\n");
            saveData.append("TOTAL_DAMAGE_TAKEN=").append(gameData.totalDamageTaken).append("\n");
            saveData.append("CRITICAL_HITS=").append(gameData.criticalHits).append("\n");
            saveData.append("SPELLS_CAST=").append(gameData.spellsCast).append("\n");
            saveData.append("ITEMS_USED=").append(gameData.itemsUsed).append("\n");
            
            // Write to file using try-with-resources
            Path savePath = Paths.get(SAVE_FILE);
            try (BufferedWriter writer = Files.newBufferedWriter(savePath)) {
                writer.write(saveData.toString());
            }
            
            return true;
            
        } catch (IOException e) {
            System.err.println("Error saving game: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Legacy save method for backwards compatibility
     */
    public static boolean saveGame(Player player, int dungeonLevel) {
        GameSaveData defaultData = new GameSaveData();
        return saveGame(player, dungeonLevel, defaultData);
    }
    
    /**
     * Loads a saved game from file.
     * 
     * @return SaveData object containing loaded data, or null if load failed
     */
    public static SaveData loadGame() {
        try {
            if (!Files.exists(Paths.get(SAVE_FILE))) {
                return null; // No save file exists
            }
            
            String content = new String(Files.readAllBytes(Paths.get(SAVE_FILE)));
            SaveData data = new SaveData();
            
            // Parse the save file
            for (String line : content.split("\n")) {
                if (line.startsWith("#") || line.trim().isEmpty()) {
                    continue; // Skip comments and empty lines
                }
                
                String[] parts = line.split("=", 2);
                if (parts.length != 2) continue;
                
                String key = parts[0].trim();
                String value = parts[1].trim();
                
                switch (key) {
                    case "NAME" -> data.name = value;
                    case "CLASS" -> data.playerClass = value;
                    case "LEVEL" -> data.level = Integer.parseInt(value);
                    case "EXPERIENCE" -> data.experience = Integer.parseInt(value);
                    case "HEALTH" -> data.health = Integer.parseInt(value);
                    case "MAX_HEALTH" -> data.maxHealth = Integer.parseInt(value);
                    case "ATTACK" -> data.attack = Integer.parseInt(value);
                    case "DEFENSE" -> data.defense = Integer.parseInt(value);
                    case "MAGIC" -> data.magic = Integer.parseInt(value);
                    case "DUNGEON_LEVEL" -> data.dungeonLevel = Integer.parseInt(value);
                    case "ROOMS_EXPLORED" -> data.roomsExplored = Integer.parseInt(value);
                    case "MONSTERS_DEFEATED" -> data.monstersDefeated = Integer.parseInt(value);
                }
            }
            
            return data;
            
        } catch (Exception e) {
            System.err.println("Error loading game: " + e.getMessage());
            return null;
        }
    }
    
    /**
     * Checks if a save file exists.
     * 
     * @return true if a save file exists, false otherwise
     */
    public static boolean saveExists() {
        return Files.exists(Paths.get(SAVE_FILE));
    }
    
    /**
     * Deletes the save file.
     * 
     * @return true if deletion was successful, false otherwise
     */
    public static boolean deleteSave() {
        try {
            if (saveExists()) {
                Files.delete(Paths.get(SAVE_FILE));
                return true;
            }
            return false;
        } catch (IOException e) {
            System.err.println("Error deleting save: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Gets the latest save file for Quick Load functionality.
     * Currently returns the main save file, but can be extended
     * to support multiple save slots by finding the most recent.
     * 
     * @return SaveData object containing loaded data, or null if load failed
     */
    public static SaveData getLatestSave() {
        return loadGame();
    }
    
    // ===== HELPER METHODS =====
    
    /**
     * Create a backup of the current save file
     */
    private static void createBackup() {
        try {
            if (Files.exists(Paths.get(SAVE_FILE))) {
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
                String backupFileName = BACKUP_DIR + "/savegame_backup_" + timestamp + ".txt";
                Files.copy(Paths.get(SAVE_FILE), Paths.get(backupFileName));
                
                // Clean up old backups
                cleanupOldBackups();
            }
        } catch (IOException e) {
            System.err.println("Warning: Could not create backup: " + e.getMessage());
        }
    }
    
    /**
     * Remove old backup files, keeping only the most recent ones
     */
    private static void cleanupOldBackups() {
        try {
            Path backupDir = Paths.get(BACKUP_DIR);
            if (!Files.exists(backupDir)) return;
            
            List<Path> backupFiles = Files.list(backupDir)
                .filter(path -> path.getFileName().toString().startsWith("savegame_backup_"))
                .sorted((a, b) -> b.getFileName().compareTo(a.getFileName()))
                .collect(java.util.stream.Collectors.toList());
            
            // Delete excess backup files
            for (int i = MAX_BACKUP_FILES; i < backupFiles.size(); i++) {
                Files.deleteIfExists(backupFiles.get(i));
            }
        } catch (IOException e) {
            System.err.println("Warning: Could not cleanup old backups: " + e.getMessage());
        }
    }
    
    /**
     * Serialize a map to a string format
     */
    private static String serializeMap(Map<String, Object> map) {
        if (map == null || map.isEmpty()) return "";
        
        return map.entrySet().stream()
            .map(entry -> entry.getKey() + ":" + entry.getValue())
            .collect(java.util.stream.Collectors.joining(";"));
    }
    
    /**
     * Deserialize a string back to a map
     */
    private static Map<String, Object> deserializeMap(String data) {
        Map<String, Object> map = new HashMap<>();
        if (data == null || data.trim().isEmpty()) return map;
        
        for (String pair : data.split(";")) {
            String[] parts = pair.split(":", 2);
            if (parts.length == 2) {
                map.put(parts[0], parts[1]);
            }
        }
        return map;
    }
    
    /**
     * Auto-save functionality
     */
    public static boolean autoSave(Player player, int dungeonLevel, GameSaveData gameData) {
        try {
            Path autoSavePath = Paths.get(AUTOSAVE_FILE);
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
            
            StringBuilder saveData = new StringBuilder();
            saveData.append("# Auto-Save - ").append(timestamp).append("\n");
            // Reuse the main save logic but write to autosave file
            // For brevity, this is a simplified version
            saveData.append("NAME=").append(player.getName()).append("\n");
            saveData.append("LEVEL=").append(player.getLevel()).append("\n");
            saveData.append("HEALTH=").append(player.getHealth()).append("\n");
            saveData.append("DUNGEON_LEVEL=").append(dungeonLevel).append("\n");
            
            try (BufferedWriter writer = Files.newBufferedWriter(autoSavePath)) {
                writer.write(saveData.toString());
            }
            
            return true;
        } catch (IOException e) {
            System.err.println("Auto-save failed: " + e.getMessage());
            return false;
        }
    }
    
    // ===== DATA CLASSES =====
    
    /**
     * Enhanced data class for v4.0.0 save game information
     */
    public static class SaveData {
        // Basic player data
        public String name;
        public String playerClass;
        public int level;
        public int experience;
        public int health;
        public int maxHealth;
        public int mana;
        public int maxMana;
        
        // Combat stats
        public int attack;
        public int defense;
        public int magic;
        public int agility;
        public int luck;
        public int accuracy;
        
        // Equipment
        public String equippedWeapon;
        public String equippedArmor;
        public String equippedAccessory;
        
        // Game progress
        public int dungeonLevel;
        public int roomsExplored;
        public int monstersDefeated;
        public int playTimeMinutes;
        
        // Achievements and quests
        public List<String> unlockedAchievements = new ArrayList<>();
        public Map<String, Object> achievementProgress = new HashMap<>();
        public List<String> activeQuests = new ArrayList<>();
        public List<String> completedQuests = new ArrayList<>();
        public Map<String, Object> questProgress = new HashMap<>();
        
        // Audio settings
        public float masterVolume = 1.0f;
        public float musicVolume = 1.0f;
        public float sfxVolume = 1.0f;
        public boolean audioEnabled = true;
        
        // Game settings
        public String difficulty = "NORMAL";
        public String theme = "DARK";
        public boolean autoSaveEnabled = true;
        
        // Statistics
        public long totalDamageDealt = 0;
        public long totalDamageTaken = 0;
        public int criticalHits = 0;
        public int spellsCast = 0;
        public int itemsUsed = 0;
        
        // Save metadata
        public String saveVersion = SAVE_VERSION;
        public String saveTimestamp;
    }
    
    /**
     * Wrapper class for additional game data to save
     */
    public static class GameSaveData {
        public List<String> unlockedAchievements = new ArrayList<>();
        public Map<String, Object> achievementProgress = new HashMap<>();
        public List<String> activeQuests = new ArrayList<>();
        public List<String> completedQuests = new ArrayList<>();
        public Map<String, Object> questProgress = new HashMap<>();
        
        public float masterVolume = 1.0f;
        public float musicVolume = 1.0f;
        public float sfxVolume = 1.0f;
        public boolean audioEnabled = true;
        
        public String difficulty = "NORMAL";
        public String theme = "DARK";
        public boolean autoSaveEnabled = true;
        public int playTimeMinutes = 0;
        
        public long totalDamageDealt = 0;
        public long totalDamageTaken = 0;
        public int criticalHits = 0;
        public int spellsCast = 0;
        public int itemsUsed = 0;
    }
}
